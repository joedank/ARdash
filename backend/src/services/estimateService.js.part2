
  /**
   * Create a new estimate
   * @param {Object} estimateData - Estimate data
   * @returns {Promise<Object>} - Created estimate
   */
  async createEstimate(estimateData) {
    try {
      // Ensure client exists using client_id (standardized from client_fk_id)
      if (!estimateData.client_id) {
          throw new Error('Client ID (client_id) is required');
      }
      const client = await Client.findByPk(estimateData.client_id);
      if (!client) {
        throw new Error(`Client not found with ID: ${estimateData.client_id}`);
      }

      // Ensure address exists if address_id is provided
      if (estimateData.address_id) {
          const address = await ClientAddress.findOne({
              where: { id: estimateData.address_id, client_id: estimateData.client_id }
          });
          if (!address) {
              throw new Error(`Address with ID ${estimateData.address_id} not found for client ${estimateData.client_id}`);
          }
      }
      
      // Verify project exists if project_id is provided
      if (estimateData.project_id) {
        const project = await require('../models').Project.findByPk(estimateData.project_id);
        if (!project) {
          throw new Error(`Project not found with ID: ${estimateData.project_id}`);
        }
        // Ensure the project and client match
        if (project.client_id !== estimateData.client_id) {
          throw new Error(`Project ${estimateData.project_id} does not belong to client ${estimateData.client_id}`);
        }
      }

      // Generate estimate number if not provided
      if (!estimateData.estimateNumber) {
        estimateData.estimateNumber = await this.generateEstimateNumber();
      }

      // Set valid until date if not provided
      if (!estimateData.validUntil) {
        const validDays = parseInt(await this.getSetting('estimate_valid_days') || '30', 10);
        const createDate = estimateData.dateCreated ? new Date(estimateData.dateCreated) : new Date();
        const validDate = new Date(createDate);
        validDate.setDate(validDate.getDate() + validDays);
        estimateData.validUntil = validDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
      }
       // Ensure dateCreated is set
      if (!estimateData.dateCreated) {
        estimateData.dateCreated = new Date().toISOString().split('T')[0]; // Format as YYYY-MM-DD
      }


      // Set terms if not provided
      if (!estimateData.terms) {
        let terms = await this.getSetting('default_estimate_terms') ||
          'This estimate is valid for {valid_days} days.';
        terms = terms.replace('{valid_days}',
          await this.getSetting('estimate_valid_days') || '30');
        estimateData.terms = terms;
      }

      // Create the estimate
      const estimate = await Estimate.create({
        ...estimateData, // Includes client_id, address_id (if provided)
        subtotal: 0,
        taxTotal: 0,
        total: 0
      });

      // Create estimate items
      if (estimateData.items && Array.isArray(estimateData.items)) {
        for (const [index, item] of estimateData.items.entries()) {
          await EstimateItem.create({
            ...item,
            estimateId: estimate.id,
            sortOrder: index
          });
        }
      }

      // Calculate totals
      await this.calculateEstimateTotals(estimate.id);

      // PDF generation is now typically handled separately via controller/route
      // if (estimateData.generatePdf) {
      //   await this.generateEstimatePDF(estimate.id); // Call new function if needed immediately
      // }

      return this.getEstimateWithDetails(estimate.id);
    } catch (error) {
       if (error.name === 'SequelizeValidationError') {
        // Log detailed validation errors
        const validationErrors = error.errors.map(err => ({
          message: err.message,
          path: err.path,
          value: err.value,
          type: err.type
        }));
        logger.error('Sequelize Validation Error creating estimate:', JSON.stringify(validationErrors, null, 2));
      } else {
        // Log other types of errors
        logger.error('Error creating estimate:', error);
      }
      throw error; // Re-throw the error
    }
  }

  /**
   * Get an estimate with all details
   * @param {string} estimateId - Estimate ID
   * @returns {Promise<Object>} - Estimate with details
   */
  async getEstimateWithDetails(estimateId) {
    try {
      // Validate UUID format before querying
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
      if (!estimateId || !uuidRegex.test(estimateId)) {
        throw new Error(`Invalid UUID format: ${estimateId}`);
      }

      // MODIFICATION: Remove attributes array for main Estimate model
      // but keep explicit attributes for all included models
      const estimate = await Estimate.findByPk(estimateId, {
        // Removed explicit attributes list for the main Estimate model
        include: [
          {
            model: EstimateItem,
            as: 'items',
            attributes: [
              'id',
              'estimate_id',
              'description',
              'quantity',
              'price',
              'tax_rate',
              'item_total',
              'sort_order',
              'product_id',
              'source_data',
              'unit',
              'custom_product_data',
              'created_at',
              'updated_at'
            ],
            order: [['sort_order', 'ASC']]
          },
          { 
            model: Invoice, 
            as: 'invoice' 
          },
          {
            model: Client,
            as: 'client',
            attributes: ['id', 'display_name', 'company', 'email', 'phone', 'client_type'],
            include: [{
              model: ClientAddress,
              as: 'addresses',
              attributes: [
                'id',
                'client_id',
                'name',
                'street_address',
                'city',
                'state',
                'postal_code',
                'country',
                'is_primary',
                'notes',
                'created_at',
                'updated_at'
              ]
            }]
          },
          {
            model: ClientAddress,
            as: 'address'
          },
          {
            model: require('../models').Project,
            as: 'project',
            attributes: [
              'id',
              'client_id',
              'address_id',
              'estimate_id',
              'type',
              'status',
              'scheduled_date',
              'scope',
              'additional_work',
              'assessment_id',
              'converted_to_job_id',
              'pre_assessment_id',
              'created_at',
              'updated_at'
            ]
          }
        ]
      });

      if (!estimate) {
        throw new Error(`Estimate with id ${estimateId} not found`);
      }

      return estimate;
    } catch (error) {
      logger.error('Error in getEstimateWithDetails:', error);
      throw error;
    }
  }
